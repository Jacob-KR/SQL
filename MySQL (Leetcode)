# 175. Combine Two Tables
SELECT      firstName,
            lastName,
            city,
            state
FROM        Person AS P
LEFT JOIN   Address AS A
ON          P.personId = A.personId;



# 176. Second Highest Salary
# Solution 01
SELECT  (CASE
         WHEN COUNT(salary) = 1 THEN NULL
         ELSE (SELECT salary FROM Employee
               WHERE salary != (SELECT MAX(salary) FROM Employee) ORDER BY salary DESC LIMIT 1)
        END) AS 'SecondHighestSalary'
FROM    Employee;

# Solution 02
SELECT      MAX(CASE
            WHEN ranking = 2 THEN salary
            ELSE NULL
            END) AS 'SecondHighestSalary'
FROM        (
SELECT      salary,
            DENSE_RANK() OVER(ORDER BY salary DESC) AS 'ranking'
FROM        Employee) Rank_Table;



# 177. Nth Highest Salary
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
SET     N = N-1;
  RETURN (
      SELECT    DISTINCT salary
      FROM      Employee
      ORDER BY  salary DESC
      LIMIT     1 OFFSET N
  );
END
# important: 1) We can not use calculation in RETURN (That's why we should use SET)
             2) OFFSET means Skip!



# 178. Rank Scores
SELECT      score,
            DENSE_RANK() OVER(ORDER BY score DESC) AS 'rank'
FROM        Scores;



# 180. Consecutive Numbers
WITH T1
AS (
    SELECT  id,
            num,
            LAG(num, 1) OVER () AS 'lag_1',
            LAG(num, 2) OVER () AS 'lag_2'
    FROM    Logs
) 

SELECT  DISTINCT num AS 'ConsecutiveNums'
FROM    T1
WHERE   (num = lag_1) AND (num = lag_2) AND (lag_1 = lag_2);



# 181. Employees Earning More Than Their Managers
SELECT      E1.name AS 'Employee'
FROM        Employee AS E1
INNER JOIN  Employee AS E2
ON          E1.managerId = E2.id
WHERE       E1.salary > E2.salary;



# 182. Duplicate Emails
# Solution 01
SELECT  DISTINCT email AS 'Email'
FROM    Person
WHERE   email IN (SELECT email FROM Person GROUP BY email HAVING COUNT(email) > 1);
# Solution 02
SELECT      email
FROM        Person
GROUP BY    email
HAVING      COUNT(email) > 1; 



# 183. Customer Who Never Order
SELECT  name AS 'Customers'
FROM    Customers
WHERE   id NOT IN (SELECT customerId FROM Orders);



# 184. Department Highest Salary
WITH    T1  AS (
SELECT      D1.name AS 'D_name',
            MAX(E1.salary) AS MAX_Salary
FROM        Employee AS E1
INNER JOIN  Department AS D1
ON          E1.departmentId = D1.id
GROUP BY    D1.name)
SELECT      D2.name AS 'Department',
            E2.name AS 'Employee',
            E2.salary AS 'Salary'
FROM        Employee AS E2
INNER JOIN  Department AS D2
ON          E2.departmentId = D2.id
INNER JOIN  T1
ON          E2.salary = T1.MAX_Salary AND D2.name = T1.D_name;



# 185. Department Top Three Salaries
WITH T1 AS (
SELECT      D.name AS 'D_name',
            E.name AS 'E_name',
            E.salary AS 'E_Salary',
            DENSE_RANK() OVER(PARTITION BY D.name   ORDER BY E.salary DESC) AS 'D_Salary_Rank'
FROM        Employee AS E
INNER JOIN  Department AS D
ON          E.departmentId = D.id)
SELECT      D_name AS 'Department',
            E_name AS 'Employee',
            E_Salary AS 'Salary'
FROM        T1
WHERE       D_Salary_Rank <= 3;



# 191. Delete Duplicate Emails
DELETE T1
FROM Person as T1, Person as T2
WHERE T1.Email = T2.Email AND T1.Id > T2.Id;



# 197. Rising Temperature
SELECT      W2.id
FROM        Weather AS W1
INNER JOIN  Weather AS W2
ON          DATE_ADD(W1.recordDate, INTERVAL 1 Day) = W2.recordDate
WHERE       W2.temperature > W1.temperature;



# 262. Trips and Users
SELECT  request_at AS 'Day',
        ROUND(COUNT(IF(status != 'completed', TRUE, NULL)) / COUNT(*), 2) AS 'Cancellation Rate'
FROM    Trips
WHERE   (request_at BETWEEN '2013-10-01' AND '2013-10-03')
AND     client_id NOT IN (SELECT users_id FROM Users WHERE banned = 'Yes')
AND     driver_id NOT IN (SELECT users_id FROM Users WHERE banned = 'Yes')
GROUP BY    request_at;



# 511. Game Play Analysis 1
SELECT      player_id,
            MIN(event_date) AS 'first_login'
FROM        Activity
GROUP BY    player_id;



# 512. Game Play Analysis II
WITH T1 AS (
SELECT      player_id,
            MIN(event_date) AS 'first_logged'
FROM        Activity
GROUP BY    player_id)
SELECT      A.player_id,
            device_id
FROM        Activity AS A
INNER JOIN  T1 AS T
ON          A.player_id = T.player_id
WHERE       A.event_date = T.first_logged;



# 534. Game Play Analysis III
SELECT  player_id,
        event_date,
        SUM(games_played) OVER(PARTITION BY player_id ORDER BY event_date ROWS UNBOUNDED PRECEDING) AS 'games_played_so_far'
FROM    Activity;



550. Game Play Analysis IV
WITH T1 AS (
SELECT      player_id,
            event_date,
            LEAD(event_date, 1) OVER(PARTITION BY player_id ORDER BY event_date) AS 'event_date2' 
FROM        Activity),
     T2 AS (
SELECT      player_id,
            MIN(event_date) AS 'first_logged'
FROM        Activity
GROUP BY    player_id),
     T3 AS (
SELECT      T1.player_id,
            T1.event_date,
            T1.event_date2,
            T2.first_logged
FROM        T1
INNER JOIN  T2
ON          T1.player_id = T2.player_id
WHERE       T1.event_date = T2.first_logged
AND         T1.event_date2 IS NOT NULL)

SELECT      ROUND((
            SELECT  COUNT(DISTINCT player_id)
            FROM    T3
            WHERE   event_date2-event_date = 1) / 
            COUNT(DISTINCT player_id), 2) AS 'fraction'
FROM        Activity;



# 569. Median Employee Salary
SELECT      id,
            company,
            salary
FROM        (
SELECT      id,
            company,
            salary,
            COUNT(*) OVER(PARTITION BY company) AS 'cnt',
            ROW_NUMBER () OVER(PARTITION BY company ORDER BY salary) AS 'rnum'
FROM        Employee) AS T1
WHERE       (cnt/2) <= rnum AND rnum <= (cnt/2) + 1
ORDER BY    company, salary;



# 570. Managers with at Least % Diredct Reports
SELECT      E1.name
FROM        Employee AS E1
INNER JOIN  Employee AS E2
ON          E1.id = E2.managerId
WHERE       E2.managerId IS NOT NULL
GROUP BY    E1.name
HAVING      COUNT(E2.managerID) >= 5;



# 571. Find Median Given Frequency of Numbers
WITH T1 AS (
SELECT      num,
            frequency,
            SUM(frequency) OVER(ORDER BY num ASC) AS 'frequency_sum',
            SUM(frequency) OVER() AS 'total_sum',
            (SUM(frequency) OVER() / 2) AS 'median_order'
FROM        Numbers)

SELECT      ROUND((SUM(num) / COUNT(num)), 2) AS 'median'
FROM        T1
WHERE       (total_sum / 2) BETWEEN frequency_sum - frequency AND total_sum; 



# 574. Winning Candidate
SELECT      name
FROM        (
SELECT      name,
            COUNT(*) AS 'vote'
FROM        Candidate AS C
INNER JOIN  Vote AS V
ON          C.id = V.candidateId
GROUP BY    name) vote_count
ORDER BY    vote DESC
LIMIT       1;



# 577. Employee Bonus
SELECT      name,
            bonus
FROM        (
SELECT      name,
            bonus
FROM        Employee AS E
LEFT JOIN   Bonus AS B
ON          E.empID = B.empID) T1
WHERE       bonus < 1000 OR bonus IS NULL;



# 578. Get Highest Answer Rate Question
WITH T1 AS (
SELECT      action,
            question_id,
            IF(action = 'show', 1, 0) AS 'show_dummy',
            IF(action = 'answer', 1, 0) AS 'answer_dummy'
FROM        SurveyLog),
     T2 AS (
SELECT      question_id,
            IF((SUM(answer_dummy) / SUM(show_dummy)) > 0, (SUM(answer_dummy) / SUM(show_dummy)), 0.0) AS 'p'
FROM        T1
GROUP BY    question_id)
SELECT      question_id AS 'survey_log'
FROM        T2
ORDER BY    p DESC, question_id ASC
LIMIT       1;



# 579. Find Cumulative Salary of an Employee
SELECT      E.id,
            E.month,
            SUM(E2.salary) AS salary
FROM        Employee AS E
INNER JOIN  Employee AS E2
ON          E.id = E2.id AND E.month >= E2.month AND (E.month - E2.month <= 2)
WHERE       E.month < (SELECT MAX(month) FROM Employee WHERE id = E.id)
GROUP BY    E.id, E.month
ORDER BY    E.id ASC, E.month DESC;



# 580. Count Student Number in Departments
SELECT      dept_name,
            COUNT(student_name) AS 'student_number'
FROM        Department AS D
LEFT JOIN   Student AS S
ON          D.dept_id = S.dept_id
GROUP BY    dept_name
ORDER BY    COUNT(student_name) DESC, dept_name ASC;



# 584. Find Customer Referee
SELECT  name
FROM    Customer
WHERE   referee_id != 2 OR referee_id IS NULL;



# 585. Investments in 2016
WITH T1 AS (
SELECT      pid,
            tiv_2015,
            tiv_2016,
            CONCAT(lat, lon) AS 'location',
            COUNT(CONCAT(lat, lon)) OVER(PARTITION BY CONCAT(lat, lon)) AS 'c_location'
FROM        Insurance),
     T2 AS (
SELECT      DISTINCT I1.pid,
            I1.tiv_2015,
            I1.tiv_2016
FROM        T1 AS I1
INNER JOIN  T1 AS I2
ON          I1.tiv_2015 = I2.tiv_2015 AND I1.pid != I2.pid
WHERE       I1.c_location < 2)
SELECT      ROUND(SUM(tiv_2016), 2) AS 'tiv_2016'
FROM        T2;



# 586. Customer Placing the Largest Number of Orders
SELECT      DISTINCT customer_number
FROM        Orders
GROUP BY    customer_number
ORDER BY    COUNT(order_number) DESC
LIMIT       1;



# 595. Big Countries
SELECT  name,
        population,
        area
FROM    World
WHERE   area >= 3000000 OR population >= 25000000;



# 596. Classes More Than 5 Students
SELECT      class
FROM        Courses
GROUP BY    class
HAVING      COUNT(DISTINCT student) >= 5;



# 597.Friend Requests I: Overall Acceptance Rate
WITH T1 AS (
SELECT      *,
            CONCAT(sender_id, send_to_id) AS 'requests'
FROM        FriendRequest),
     T2 AS (
SELECT      *,
            CONCAT(requester_id, accepter_id) AS 'accepted_requests'
FROM        RequestAccepted)
SELECT      DISTINCT ROUND(IFNULL(((SELECT COUNT(DISTINCT accepted_requests) FROM T2) /
            (SELECT COUNT(DISTINCT requests) FROM T1)), 0), 2) AS 'accept_rate';



# 601. Human Traffic of Stadium
SELECT      DISTINCT T1.*
FROM        Stadium AS T1, Stadium AS T2, Stadium AS T3
WHERE       T1.people >= 100 AND T2.people >= 100 AND T3.people >= 100
AND         ((T1.id - T2.id = 1 AND T1.id - T3.id = 2 AND T2.id - T3.id = 1)
OR           (T2.id - T1.id = 1 AND T2.id - T3.id = 2 AND T1.id - T3.id = 1)
OR           (T3.id - T2.id = 1 AND T2.id - T1.id = 1 AND T3.id - T1.id = 2)
)
ORDER BY    T1.id;



# 602. Friend Requests II: Who Has the Most Friends
WITH T1 AS (
SELECT      requester_id AS 'count_num'
FROM        RequestAccepted

UNION ALL

SELECT      accepter_id AS 'count_num'
FROM        RequestAccepted)

SELECT      count_num AS 'id',
            COUNT(count_num) AS 'num'
FROM        T1
GROUP BY    count_num
ORDER BY    COUNT(count_num) DESC
LIMIT       1;



# 603. Consecutive Available Seats
SELECT      seat_id
FROM        (
SELECT      seat_id,
            free,
            SUM(free) OVER(ORDER BY seat_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS 'free_2'
FROM        Cinema) T1
WHERE       free + free_2 >= 3



# 607. Sales Person
SELECT      name
FROM        SalesPerson
WHERE       name NOT IN
(SELECT      S.name
 FROM        SalesPerson AS S, Company As C, Orders AS O
 WHERE       S.sales_id = O.sales_id AND C.com_id = O.com_id
 AND         C.name = 'RED');
 
 
 
 # 608. Tree Node
 SELECT  id,
        CASE
        WHEN p_id IS NULL THEN 'Root'
        WHEN id IN (SELECT p_id FROM Tree) THEN 'Inner'
        ELSE 'Leaf'
        END AS 'type'
FROM    Tree;



# 610. Triangle Judgement
SELECT  x,
        y,
        z,
        IF((x + y <= z) OR (y + z <= x) OR (z + x <= y), 'No', 'Yes') AS 'triangle'
FROM    Triangle;



# 612. Shortest Distance in a Plane
WITH T1 AS (
SELECT      P1.x AS 'x1',
            P1.y AS 'y1',
            P2.x AS 'x2',
            P2.y AS 'y2'
FROM        Point2D AS P1
CROSS JOIN  Point2D AS P2),
     T2 AS (
SELECT      *,
            CONCAT(x1, y1) AS 'xy1',
            CONCAT(x2, y2) AS 'xy2'
FROM        T1)
SELECT      ROUND(MIN(SQRT(POW((x1 - x2), 2) + POW((y1 - y2), 2))), 2) AS 'shortest'
FROM        T2
WHERE       xy1 != xy2;



# 613. Shortest Distance in a Line
SELECT      MIN(ABS(x1 - x2)) AS 'shortest'
FROM        (
SELECT      P1.x AS 'x1',
            P2.x AS 'x2'
FROM        Point AS P1
CROSS JOIN  Point AS P2) T1
WHERE       x1 != x2;



# 614. Second Degree Follower
WITH T1 AS (
SELECT      F1.followee AS followee,
            F1.follower AS follower,
            F2.follower AS follower2
FROM        Follow AS F1
INNER JOIN  Follow AS F2
ON          F1.follower = F2.followee)

SELECT      follower,
            COUNT(DISTINCT follower2) AS 'num'
FROM        T1
GROUP BY    follower
ORDER BY    follower ASC;



# 615. Average Salary: Departments VS Company
WITH T1 AS (
SELECT      pay_month,
            department_id,
            AVG(amount) AS 'avg_salary',
            company_salary
FROM        (
SELECT      id,
            S.employee_id,
            E.department_id,
            amount,
            pay_date,
            CONCAT(SUBSTR(pay_date, 1, 4), "-", SUBSTR(pay_date, 6, 2)) AS 'pay_month',
            AVG(amount) OVER(PARTITION BY SUBSTR(pay_date, 1, 7)) AS 'company_salary'
FROM        Salary AS S
INNER JOIN  Employee AS E
ON          S.employee_id = E.employee_id) SubTable
GROUP BY    pay_month, department_id)

SELECT      pay_month,
            department_id,
            CASE
            WHEN avg_salary > company_salary THEN 'higher'
            WHEN avg_salary = company_salary THEN 'same'
            ELSE 'lower'
            END AS 'comparison'
FROM        T1;



# 618. Students Report By Geography
SELECT      America,
            Asia,
            Europe
FROM        (
SELECT      ROW_NUMBER() OVER() AS 'rn1',
            name AS 'America'
FROM        Student
WHERE       continent = 'America'
ORDER BY    name ASC) America_Table
LEFT JOIN   (
SELECT      ROW_NUMBER() OVER() AS 'rn2',
            name AS 'Asia'
FROM        Student
WHERE       continent = 'Asia'
ORDER BY    name ASC) Asia_Table
ON          America_Table.rn1 = Asia_Table.rn2
LEFT JOIN   (
SELECT      ROW_NUMBER() OVER() AS 'rn3',
            name AS 'Europe'
FROM        Student
WHERE       continent = 'Europe'
ORDER BY    name ASC) Europe_Table
ON          America_Table.rn1 = Europe_Table.rn3;



# 619. Biggest Single Number
SELECT      MAX(num) AS 'num'
FROM        (
SELECT      num,
            COUNT(*) OVER(PARTITION BY num) AS 'cnt'
FROM        MyNumbers) T1
WHERE       cnt < 2;



# 620. Not Boring Movies
SELECT      *
FROM        Cinema
WHERE       MOD(id, 2) = 1 AND description != 'boring'
ORDER BY    rating DESC;



# 626. Exchange Seats
WITH T1 AS  (
SELECT      id,
            student,
            LEAD(student) OVER(ORDER BY id ASC) AS 'student2',
            LAG(student) OVER(ORDER BY id ASC) AS 'student3'
FROM        Seat)
SELECT      id,
            CASE
            WHEN student2 IS NOT NULL AND MOD(id, 2) = 1 THEN student2
            WHEN student2 IS NOT NULL AND MOD(id, 2) = 0 THEN student3
            WHEN student2 IS NULL AND MOD(id, 2) = 1 THEN student
            WHEN student2 IS NULL AND MOD(id, 2) = 0 THEN student3
            END  'student'
FROM        T1
ORDER BY    id ASC;



# 627. Swap Salary
UPDATE  Salary
SET
    sex =
        CASE
        WHEN sex = 'm' THEN 'f'
        WHEN sex = 'f' THEN 'm'
        END;



# 1045. Customers Who Bought All Products
SELECT      customer_id
FROM        (
SELECT      customer_id,
            COUNT(DISTINCT product_key) AS 'cnt'
FROM        Customer
GROUP BY    customer_id) SubTable
WHERE       cnt = (SELECT COUNT(DISTINCT product_key) FROM Customer);



# 1050. Actors and Directors Who Cooperated At Least Three Times
SELECT      actor_id,
            director_id
FROM        (
SELECT      actor_id,
            director_id,
            COUNT(*) AS 'pair_count'
FROM        ActorDirector
GROUP BY    actor_id, director_id) AS T1
WHERE       pair_count >= 3;



# 1068. Product Sales Analysis I
SELECT      P.product_name,
            S.year,
            S.price
FROM        Sales AS S
INNER JOIN  Product AS P
ON          S.product_id = P.product_id;



1069. Product Sales Analysis II
SELECT      product_id,
            SUM(quantity) AS 'total_quantity'
FROM        Sales
GROUP BY    product_id;



# 1070. Product Sales Analysis III
SELECT      product_id,
            year AS 'first_year',
            quantity,
            price
FROM        (
SELECT      product_id,
            year,
            quantity,
            price,
            MIN(year) OVER(PARTITION BY product_id) AS 'f_year'
FROM        Sales) SubTable
WHERE       year = f_year;



# 1075. Project Employees I
SELECT      project_id,
            ROUND(AVG(experience_years), 2) AS 'average_years'
FROM        Employee AS E
INNER JOIN  Project AS P
ON          E.employee_id = P.employee_id
GROUP BY    project_id;



1076. Project Employees II
# Solution 01
WITH T1 AS (
SELECT      project_id,
            RANK() OVER(ORDER BY cnt DESC) AS 'rank'
FROM        (
SELECT      project_id,
            COUNT(*) AS 'cnt'
FROM        Project
GROUP BY    project_id) SubTable)
SELECT      project_id
FROM        T1
WHERE       T1.rank = 1;

# Solution 02
SELECT      project_id
FROM        (
SELECT      project_id,
            RANK() OVER(ORDER BY  COUNT(*) DESC) AS 'rank'
FROM        Project
GROUP BY    project_id) SubTable
WHERE       SubTable.rank = 1;



# 1077. Project Employees III
WITH T1 AS (
SELECT      P.project_id,
            P.employee_id,
            RANK() OVER(PARTITION BY P.project_id ORDER BY E.experience_years DESC) AS 'ex_rank'
FROM        Project AS P
INNER JOIN  Employee AS E
ON          P.employee_id = E.employee_id)

SELECT      project_id,
            employee_id
FROM        T1
WHERE       ex_rank = 1;



# 1084. Sales Analysis III
SELECT      p.product_id, p.product_name
FROM        Product p
LEFT JOIN   Sales s
ON          p.product_id = s.product_id
GROUP BY    p.product_id
HAVING      SUM(s.sale_date between '2019-01-01' and '2019-03-31') = COUNT(s.sale_date);



# 1097. Game Play Analysis V
SELECT    T1.install_date AS 'install_dt',
          COUNT(T1.install_date) AS 'installs',
          ROUND(COUNT(event_date) / COUNT(*), 2) AS 'Day1_retention'
FROM      (
SELECT    player_id,
          MIN(event_date) AS 'install_date'
FROM      Activity
GROUP BY  player_id) AS T1
LEFT JOIN Activity AS T2
ON        DATE_ADD(T1.install_date, INTERVAL 1 DAY) = T2.event_date
          AND T1.player_id = T2.player_id
GROUP BY  T1.install_date;



# 1098. Unpopular Books
WITH  T1 AS (
SELECT      B.book_id,
            B.name
FROM        Books AS B
LEFT JOIN   Orders AS O
ON          B.book_id = O.book_id
WHERE       DATEDIFF('2019-06-23', B.available_from) > 31
GROUP BY    B.book_id, B.name),
      T2 AS (
SELECT      book_id,
            SUM(quantity) AS 'book_q'
FROM        Orders
WHERE       dispatch_date BETWEEN '2018-06-24' AND '2019-06-23'
GROUP BY    book_id)
SELECT      T1.book_id,
            T1.name
FROM        T1
WHERE       T1.book_id NOT IN
            (SELECT book_id FROM T2 WHERE book_q >= 10);
            
 

# 1107. New Users Daily Count
WITH T1 AS (
SELECT      user_id,
            MIN(activity_date) AS 'first_login_date'
FROM        Traffic
WHERE       activity = 'login'
GROUP BY    user_id)
SELECT      activity_date AS 'login_date',
            COUNT(DISTINCT T.user_id) AS 'user_count'
FROM        Traffic AS T
INNER JOIN  T1
ON          T.user_id = T1.user_id AND T.activity_date = T1.first_login_date
WHERE       DATEDIFF('2019-06-30', activity_date) <= 90
GROUP BY    activity_date;



# 1112. Highest Grade For Each Student
SELECT    student_id,
          MIN(course_id) AS 'course_id',
          grade
FROM      Enrollments
WHERE     (student_id, grade) IN
          (SELECT student_id, MAX(grade) FROM Enrollments GROUP BY student_id)
GROUP BY  student_id
ORDER BY  student_id;



# 1113. Reported Posts
SELECT      extra AS 'report_reason',
            COUNT(DISTINCT post_id) AS 'report_count'
FROM        Actions
WHERE       action = 'report'
            AND DATEDIFF('2019-07-05', action_date) = 1
GROUP BY    extra;



# 1126. Active Businesses
WITH T1 AS  (
SELECT      E.business_id,
            E.event_type,
            E.occurences,
            T.average
FROM        Events AS E
INNER JOIN  (
SELECT      event_type,
            AVG(occurences) AS 'average'
FROM        Events
GROUP BY    event_type) AS T
ON          E.event_type = T.event_type
            AND E.occurences > T.average)
SELECT      business_id
FROM        T1
GROUP BY    business_id
HAVING      COUNT(*) > 1;



# 1127. User Purchase Platform



# 1132. Reported Posts II
SELECT      ROUND(AVG(daily_percent), 2) AS 'average_daily_percent'
FROM        (
SELECT      (COUNT(DISTINCT R.post_id) / COUNT(DISTINCT A.post_id))*100 AS 'daily_percent'
FROM        Actions AS A
LEFT JOIN   Removals AS R
ON          A.post_id = R.post_id
WHERE       extra = 'spam'
GROUP BY    action_date) AS subtable;



# 1141. User Activity for the Past 30 Days I
SELECT      activity_date AS 'day',
            COUNT(DISTINCT user_id) AS 'active_users'
FROM        Activity
WHERE       activity_date BETWEEN DATE_SUB('2019-07-27', INTERVAL 29 DAY) AND '2019-07-27'
GROUP BY    activity_date;



# 1142. User Activity for the Past 30 Days II
SELECT      IFNULL(ROUND(AVG(cnt), 2), 0) AS 'average_sessions_per_user'
FROM        (
SELECT      user_id,
            COUNT(DISTINCT session_id) AS 'cnt'
FROM        Activity
WHERE       DATEDIFF('2019-07-27', activity_date) <= 29
GROUP BY    user_id) subtable



# 1148. Article Views I
SELECT      DISTINCT author_id AS 'id'
FROM        Views
WHERE       author_id = viewer_id
ORDER BY    author_id ASC;



# 1149. Article Views II
SELECT      DISTINCT viewer_id AS 'id'
FROM        (
SELECT      viewer_id,
            view_date,
            GROUP_CONCAT(DISTINCT article_id) AS 'concat_article_id'
FROM        Views
GROUP BY    viewer_id, view_date) subtable
WHERE       concat_article_id LIKE '%,%'
ORDER BY    viewer_id ASC;



# 1158. Market Analysis I
SELECT      U.user_id AS 'buyer_id',
            U.join_date,
            COUNT(O.order_date) 'orders_in_2019'
FROM        Users AS U
LEFT JOIN   Orders AS O
ON          U.user_id = O.buyer_id
AND         YEAR(O.order_date) = 2019
GROUP BY    U.user_id, U.join_date
ORDER BY    U.user_id;



# 1164. Product Price at a Given Date
WITH T1 AS (
SELECT    product_id,
          new_price,
          RANK() OVER(PARTITION BY product_id ORDER BY change_date DESC) AS 'rnk'
FROM      Products
WHERE     change_date <= '2019-08-16')

SELECT    DISTINCT P.product_id,
          COALESCE(P2.new_price, 10) AS 'price'
FROM      Products AS P
LEFT JOIN (SELECT * FROM T1 WHERE rnk=1) as P2
ON        P.product_id = P2.product_id; 



# 1173. Immediate Food Delivery I
SELECT      ROUND((SUM(IF(customer_pref_delivery_date = order_date, 1, 0)) / COUNT(*))
            * 100, 2) AS 'immediate_percentage'
FROM        Delivery;



# 1174. Immediate Food Delivery II
WITH  T1  AS (
SELECT        customer_id,
              MIN(order_date) AS 'min_date'
FROM          Delivery
GROUP BY      customer_id),
      T2  AS  (
SELECT        D.customer_id,
              D.order_date,
              D.customer_pref_delivery_date
FROM          Delivery AS D
INNER JOIN    T1
ON            D.customer_id = T1.customer_id AND D.order_date = T1.min_date)

SELECT        ROUND((SUM(IF(order_date = customer_pref_delivery_date, 1, 0)) / COUNT(*))*100, 2)
              AS 'immediate_percentage'
FROM          T2;



# 1179. Reformat Department Table
SELECT      id,
            MAX(CASE
                WHEN month = 'Jan' THEN revenue
                ELSE NULL
                END) AS 'Jan_Revenue',
            MAX(CASE
                WHEN month = 'Feb' THEN revenue
                ELSE NULL
                END) AS 'Feb_Revenue',
            MAX(CASE
                WHEN month = 'Mar' THEN revenue
                ELSE NULL
                END) AS 'Mar_Revenue',
            MAX(CASE
                WHEN month = 'Apr' THEN revenue
                ELSE NULL
                END) AS 'Apr_Revenue',
            MAX(CASE
                WHEN month = 'May' THEN revenue
                ELSE NULL
                END) AS 'May_Revenue',
            MAX(CASE
                WHEN month = 'Jun' THEN revenue
                ELSE NULL
                END) AS 'Jun_Revenue',
            MAX(CASE
                WHEN month = 'Jul' THEN revenue
                ELSE NULL
                END) AS 'Jul_Revenue',
            MAX(CASE
                WHEN month = 'Aug' THEN revenue
                ELSE NULL
                END) AS 'Aug_Revenue',
            MAX(CASE
                WHEN month = 'Sep' THEN revenue
                ELSE NULL
                END) AS 'Sep_Revenue',
            MAX(CASE
                WHEN month = 'Oct' THEN revenue
                ELSE NULL
                END) AS 'Oct_Revenue',
            MAX(CASE
                WHEN month = 'Nov' THEN revenue
                ELSE NULL
                END) AS 'Nov_Revenue',
            MAX(CASE
                WHEN month = 'Dec' THEN revenue
                ELSE NULL
                END) AS 'Dec_Revenue'
FROM        Department
GROUP BY    id
ORDER BY    id ASC;



# 1082. Sales Analysis I
SELECT      seller_id
FROM        (
SELECT      seller_id,
            SUM(price) AS 'total_sales_price',
            DENSE_RANK() OVER(ORDER BY SUM(price) DESC) AS 'rank'
FROM        Sales
GROUP BY    seller_id) SubTable
WHERE       SubTable.rank = 1;


# 1083. Sales Analysis II
WITH T1 AS (
SELECT      P.product_id,
            buyer_id,
            product_name
FROM        Product AS P
INNER JOIN  Sales AS S
ON          P.product_id = S.product_id)

SELECT      DISTINCT buyer_id
FROM        T1
WHERE       buyer_id IN (SELECT buyer_id FROM T1 WHERE product_name = 'S8')
            AND buyer_id NOT IN (SELECT buyer_id FROM T1 WHERE product_name = 'iPhone');



# 1393. Capital Gain/Loss
SELECT      stock_name,
            SUM(calculated_price) AS 'capital_gain_loss'
FROM        (
SELECT      *,
            CASE
            WHEN operation = 'Buy' THEN -1*price
            WHEN operation = 'Sell' THEN price
            END AS 'calculated_price'
FROM        Stocks) AS Cal_Table
GROUP BY    stock_name;



# 1407. Top Travellers
SELECT      T1.name,
            T1.travelled_distance
FROM        (
SELECT      U.id,
            U.name,
            IF(SUM(R.distance) IS NOT NULL, SUM(R.distance), 0) AS 'travelled_distance'
FROM        Users AS U
LEFT JOIN   Rides AS R
ON          U.id = R.user_id
GROUP BY    U.id, U.name) AS T1
ORDER BY    T1.travelled_distance DESC, T1.name ASC;



# 1484. Group Sold Products By The Date
SELECT      sell_date,
            COUNT(DISTINCT product) AS 'num_sold',
            GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR ',') AS 'products'
FROM        Activities
GROUP BY    sell_date
ORDER BY    sell_date;
* Important! -> GROUP_CONCAT function



# 1527. Patients With a Condition
SELECT  patient_id,
        patient_name,
        conditions
FROM    Patients
WHERE   conditions LIKE '% DIAB1%'
        OR conditions LIKE 'DIAB1%';



# 1581. Customer Who Visited but Did Not Make any Transactions
SELECT      customer_id,
            SUM(
            CASE
            WHEN T.visit_id IS NULL THEN 1
            ELSE 0
            END
            ) AS 'count_no_trans'
FROM        Visits AS V
LEFT JOIN   Transactions AS T
ON          V.visit_id = T.visit_id
GROUP BY    customer_id
HAVING      count_no_trans > 0;



# 1587. Bank Account Summary II
SELECT      name,
            balance
FROM        (
SELECT      account,
            SUM(amount) AS 'balance'
FROM        Transactions
GROUP BY    account
HAVING      balance > 10000) AS T1
INNER JOIN  Users AS U
ON          T1.account = U.account;



# 1667. Fix Names in a Table
SELECT      user_id,
            CONCAT(UPPER(SUBSTR(name, 1, 1)), LOWER(SUBSTR(name, 2))) AS 'name'
FROM        Users
ORDER BY    user_id;



# 1693. Daily Leads and Partners
SELECT      date_id,
            make_name,
            COUNT(DISTINCT lead_id) AS 'unique_leads',
            COUNT(DISTINCT partner_id) AS 'unique_partners'
FROM        DailySales
GROUP BY    date_id, make_name;



# 1729. Find Follwers Count
SELECT      user_id,
            COUNT(DISTINCT follower_id) AS 'followers_count'
FROM        Followers
GROUP BY    user_id;



# 1741. Find Total Times Spent by Each Employee
SELECT      event_day AS 'day',
            emp_id,
            SUM(out_time - in_time) AS 'total_time'
FROM        Employees
GROUP BY    event_day, emp_id;



# 1757. Recyclable and Low Fat Products
SELECT  product_id
FROM    Products
WHERE   low_fats = 'Y' AND recyclable = 'Y';



1795. Rearrange Products Table
SELECT  product_id, 
        "store1" AS "store",
        store1 AS "price"
FROM    Products
WHERE   store1 IS NOT NULL

UNION

SELECT  product_id, 
        "store2" AS "store",
        store2 AS "price"
FROM    Products
WHERE   store2 IS NOT NULL

UNION

SELECT  product_id, 
        "store3" AS "store",
        store3 AS "price"
FROM    Products
WHERE   store3 IS NOT NULL;



# 1873. Calculate Special Bonus
SELECT      employee_id,
            CASE
            WHEN MOD(employee_id, 2) = 1 AND SUBSTR(name, 1, 1) != 'M' THEN salary
            ELSe 0
            END AS 'bonus'
FROM        Employees
ORDER BY    employee_id;



# 1890. The Lastest Login in 2020
SELECT      user_id,
            MAX(time_stamp) AS 'last_stamp'
FROM        Logins
WHERE       YEAR(time_stamp) = '2020'
GROUP BY    user_id;



# 1965. Employees With Missing Information
WITH T1 AS  (
SELECT      E.employee_id,
            name,
            salary
FROM        Employees AS E
LEFT JOIN   Salaries AS S
ON          E.employee_id = S.employee_id

UNION

SELECT      S.employee_id,
            name,
            salary
FROM        Employees AS E
RIGHT JOIN  Salaries AS S
ON          E.employee_id = S.employee_id)

SELECT      employee_id
FROM        T1
WHERE       name IS NULL or salary IS NULL
ORDER BY    employee_id ASC;
