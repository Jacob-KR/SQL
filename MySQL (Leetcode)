# 175. Combine Two Tables
SELECT      firstName,
            lastName,
            city,
            state
FROM        Person AS P
LEFT JOIN   Address AS A
ON          P.personId = A.personId;



# 176. Second Highest Salary
SELECT  (CASE
         WHEN COUNT(salary) = 1 THEN NULL
         ELSE (SELECT salary FROM Employee
               WHERE salary != (SELECT MAX(salary) FROM Employee) ORDER BY salary DESC LIMIT 1)
        END) AS 'SecondHighestSalary'
FROM    Employee;



# 177. Nth Highest Salary
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
SET     N = N-1;
  RETURN (
      SELECT    DISTINCT salary
      FROM      Employee
      ORDER BY  salary DESC
      LIMIT     1 OFFSET N
  );
END
# important: 1) We can not use calculation in RETURN (That's why we should use SET)
             2) OFFSET means Skip!



# 178. Rank Scores
SELECT      score,
            DENSE_RANK() OVER(ORDER BY score DESC) AS 'rank'
FROM        Scores
ORDER BY    score DESC;



# 180. Consecutive Numbers
WITH T1
AS (
    SELECT  id,
            num,
            LAG(num, 1) OVER () AS 'lag_1',
            LAG(num, 2) OVER () AS 'lag_2'
    FROM    Logs
) 

SELECT  DISTINCT num AS 'ConsecutiveNums'
FROM    T1
WHERE   (num = lag_1) AND (num = lag_2) AND (lag_1 = lag_2);



# 181. Employees Earning More Than Their Managers
SELECT      E1.name AS 'Employee'
FROM        Employee AS E1
INNER JOIN  Employee AS E2
ON          E1.managerId = E2.id
WHERE       E1.salary > E2.salary;



# 182. Duplicate Emails
SELECT  DISTINCT email AS 'Email'
FROM    Person
WHERE   email IN (SELECT email FROM Person GROUP BY email HAVING COUNT(email) > 1);



# 183. Customer Who Never Order
SELECT  name AS 'Customers'
FROM    Customers
WHERE   id NOT IN (SELECT customerId FROM Orders);



# 184. Department Highest Salary
WITH    T1  AS (
SELECT      D1.name AS 'D_name',
            MAX(E1.salary) AS MAX_Salary
FROM        Employee AS E1
INNER JOIN  Department AS D1
ON          E1.departmentId = D1.id
GROUP BY    D1.name)
SELECT      D2.name AS 'Department',
            E2.name AS 'Employee',
            E2.salary AS 'Salary'
FROM        Employee AS E2
INNER JOIN  Department AS D2
ON          E2.departmentId = D2.id
INNER JOIN  T1
ON          E2.salary = T1.MAX_Salary AND D2.name = T1.D_name;



# 185. Department Top Three Salaries
WITH T1 AS (
SELECT      D.name AS 'D_name',
            E.name AS 'E_name',
            E.salary AS 'E_Salary',
            DENSE_RANK() OVER(PARTITION BY D.name   ORDER BY E.salary DESC) AS 'D_Salary_Rank'
FROM        Employee AS E
INNER JOIN  Department AS D
ON          E.departmentId = D.id)
SELECT      D_name AS 'Department',
            E_name AS 'Employee',
            E_Salary AS 'Salary'
FROM        T1
WHERE       D_Salary_Rank <= 3;



# 191. Delete Duplicate Emails
DELETE T1
FROM Person as T1, Person as T2
WHERE T1.Email = T2.Email AND T1.Id > T2.Id;



# 197. Rising Temperature
SELECT      W2.id
FROM        Weather AS W1
INNER JOIN  Weather AS W2
ON          DATE_ADD(W1.recordDate, INTERVAL 1 Day) = W2.recordDate
WHERE       W2.temperature > W1.temperature;



# 262. Trips and Users
SELECT  request_at AS 'Day',
        ROUND(COUNT(IF(status != 'completed', TRUE, NULL)) / COUNT(*), 2) AS 'Cancellation Rate'
FROM    Trips
WHERE   (request_at BETWEEN '2013-10-01' AND '2013-10-03')
AND     client_id NOT IN (SELECT users_id FROM Users WHERE banned = 'Yes')
AND     driver_id NOT IN (SELECT users_id FROM Users WHERE banned = 'Yes')
GROUP BY    request_at;



# 511. Game Play Analysis 1
SELECT      player_id,
            MIN(event_date) AS 'first_login'
FROM        Activity
GROUP BY    player_id;



# 584. Find Customer Referee
SELECT  name
FROM    Customer
WHERE   referee_id != 2 OR referee_id IS NULL;



# 586. Customer Placing the Largest Number of Orders
SELECT      DISTINCT customer_number
FROM        Orders
GROUP BY    customer_number
ORDER BY    COUNT(order_number) DESC
LIMIT       1;



# 595. Big Countries
SELECT  name,
        population,
        area
FROM    World
WHERE   area >= 3000000 OR population >= 25000000;



# 596. Classes More Than 5 Students
SELECT      class
FROM        Courses
GROUP BY    class
HAVING      COUNT(DISTINCT student) >= 5;



# 601. Human Traffic of Stadium
SELECT      DISTINCT T1.*
FROM        Stadium AS T1, Stadium AS T2, Stadium AS T3
WHERE       T1.people >= 100 AND T2.people >= 100 AND T3.people >= 100
AND         ((T1.id - T2.id = 1 AND T1.id - T3.id = 2 AND T2.id - T3.id = 1)
OR           (T2.id - T1.id = 1 AND T2.id - T3.id = 2 AND T1.id - T3.id = 1)
OR           (T3.id - T2.id = 1 AND T2.id - T1.id = 1 AND T3.id - T1.id = 2)
)
ORDER BY    T1.id;



# 607. Sales Person
SELECT      name
FROM        SalesPerson
WHERE       name NOT IN
(SELECT      S.name
 FROM        SalesPerson AS S, Company As C, Orders AS O
 WHERE       S.sales_id = O.sales_id AND C.com_id = O.com_id
 AND         C.name = 'RED');
 
 
 
 # 608. Tree Node
 SELECT  id,
        CASE
        WHEN p_id IS NULL THEN 'Root'
        WHEN id IN (SELECT p_id FROM Tree) THEN 'Inner'
        ELSE 'Leaf'
        END AS 'type'
FROM    Tree;



# 620. Not Boring Movies
SELECT      *
FROM        Cinema
WHERE       MOD(id, 2) = 1 AND description != 'boring'
ORDER BY    rating DESC;



# 626. Exchange Seats
WITH T1 AS  (
SELECT      id,
            student,
            LEAD(student) OVER(ORDER BY id ASC) AS 'student2',
            LAG(student) OVER(ORDER BY id ASC) AS 'student3'
FROM        Seat)
SELECT      id,
            CASE
            WHEN student2 IS NOT NULL AND MOD(id, 2) = 1 THEN student2
            WHEN student2 IS NOT NULL AND MOD(id, 2) = 0 THEN student3
            WHEN student2 IS NULL AND MOD(id, 2) = 1 THEN student
            WHEN student2 IS NULL AND MOD(id, 2) = 0 THEN student3
            END  'student'
FROM        T1
ORDER BY    id ASC;



# 627. Swap Salary
UPDATE  Salary
SET
    sex =
        CASE
        WHEN sex = 'm' THEN 'f'
        WHEN sex = 'f' THEN 'm'
        END;



# 1050. Actors and Directors Who Cooperated At Least Three Times
SELECT      actor_id,
            director_id
FROM        (
SELECT      actor_id,
            director_id,
            COUNT(*) AS 'pair_count'
FROM        ActorDirector
GROUP BY    actor_id, director_id) AS T1
WHERE       pair_count >= 3;



# 1084. Sales Analysis III
SELECT      p.product_id, p.product_name
FROM        Product p
LEFT JOIN   Sales s
ON          p.product_id = s.product_id
GROUP BY    p.product_id
HAVING      SUM(s.sale_date between '2019-01-01' and '2019-03-31') = COUNT(s.sale_date);
