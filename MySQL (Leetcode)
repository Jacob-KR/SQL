# 175. Combine Two Tables
SELECT      firstName,
            lastName,
            city,
            state
FROM        Person AS P
LEFT JOIN   Address AS A
ON          P.personId = A.personId;



# 176. Second Highest Salary
SELECT  (CASE
         WHEN COUNT(salary) = 1 THEN NULL
         ELSE (SELECT salary FROM Employee
               WHERE salary != (SELECT MAX(salary) FROM Employee) ORDER BY salary DESC LIMIT 1)
        END) AS 'SecondHighestSalary'
FROM    Employee;



# 177. Nth Highest Salary
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
SET     N = N-1;
  RETURN (
      SELECT    DISTINCT salary
      FROM      Employee
      ORDER BY  salary DESC
      LIMIT     1 OFFSET N
  );
END
# important: 1) We can not use calculation in RETURN (That's why we should use SET)
             2) OFFSET means Skip!



# 178. Rank Scores
SELECT      score,
            DENSE_RANK() OVER(ORDER BY score DESC) AS 'rank'
FROM        Scores
ORDER BY    score DESC;



# 180. Consecutive Numbers
WITH T1
AS (
    SELECT  id,
            num,
            LAG(num, 1) OVER () AS 'lag_1',
            LAG(num, 2) OVER () AS 'lag_2'
    FROM    Logs
) 

SELECT  DISTINCT num AS 'ConsecutiveNums'
FROM    T1
WHERE   (num = lag_1) AND (num = lag_2) AND (lag_1 = lag_2);



# 181. Employees Earning More Than Their Managers
SELECT      E1.name AS 'Employee'
FROM        Employee AS E1
INNER JOIN  Employee AS E2
ON          E1.managerId = E2.id
WHERE       E1.salary > E2.salary;



# 182. Duplicate Emails
SELECT  DISTINCT email AS 'Email'
FROM    Person
WHERE   email IN (SELECT email FROM Person GROUP BY email HAVING COUNT(email) > 1);



# 183. Customer Who Never Order
SELECT  name AS 'Customers'
FROM    Customers
WHERE   id NOT IN (SELECT customerId FROM Orders);



# 184. Department Highest Salary
WITH    T1  AS (
SELECT      D1.name AS 'D_name',
            MAX(E1.salary) AS MAX_Salary
FROM        Employee AS E1
INNER JOIN  Department AS D1
ON          E1.departmentId = D1.id
GROUP BY    D1.name)
SELECT      D2.name AS 'Department',
            E2.name AS 'Employee',
            E2.salary AS 'Salary'
FROM        Employee AS E2
INNER JOIN  Department AS D2
ON          E2.departmentId = D2.id
INNER JOIN  T1
ON          E2.salary = T1.MAX_Salary AND D2.name = T1.D_name;



# 185. Department Top Three Salaries
WITH T1 AS (
SELECT      D.name AS 'D_name',
            E.name AS 'E_name',
            E.salary AS 'E_Salary',
            DENSE_RANK() OVER(PARTITION BY D.name   ORDER BY E.salary DESC) AS 'D_Salary_Rank'
FROM        Employee AS E
INNER JOIN  Department AS D
ON          E.departmentId = D.id)
SELECT      D_name AS 'Department',
            E_name AS 'Employee',
            E_Salary AS 'Salary'
FROM        T1
WHERE       D_Salary_Rank <= 3;



# 191. Delete Duplicate Emails
DELETE T1
FROM Person as T1, Person as T2
WHERE T1.Email = T2.Email AND T1.Id > T2.Id;



# 197. Rising Temperature
SELECT      W2.id
FROM        Weather AS W1
INNER JOIN  Weather AS W2
ON          DATE_ADD(W1.recordDate, INTERVAL 1 Day) = W2.recordDate
WHERE       W2.temperature > W1.temperature;


