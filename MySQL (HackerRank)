# MySQL (HackerRank)


# [SQL] [Advanced Join] SQL Project Planning
SELECT      Start_Date,
            MIN(End_Date)
FROM        (
SELECT      Start_Date
FROM        Projects
WHERE       Start_Date NOT IN (SELECT End_Date FROM Projects)
) AS T1,
(
SELECT      End_Date
FROM        Projects
WHERE       End_Date NOT IN (SELECT Start_Date FROM Projects)
) AS T2
WHERE       Start_Date < End_Date
GROUP BY    Start_Date
ORDER BY    (MIN(End_Date) - Start_Date), Start_Date;


# [SQL] [Advanced Join] Placements
SELECT      Name
FROM
(
SELECT      S.ID,
            S.Name,
            P1.Salary
FROM        Students AS S
INNER JOIN  Packages AS P1
ON          S.ID = P1.ID) AS T1,
(
SELECT      F.ID,
            P2.Salary
FROM        Friends AS F
INNER JOIN  Packages AS P2
ON          F.Friend_ID = P2.ID) AS T2
WHERE       T1.ID = T2.ID AND T1.Salary < T2.Salary
ORDER BY    T2.Salary;

# [SQL] [Advanced Join] Symmetric Pairs
# Solution 01
SELECT      DISTINCT T1.X,
            T1.Y
FROM        (
SELECT      X,
            Y,
            ROW_NUMBER() OVER (ORDER BY X) AS "RowNum"
FROM        Functions) AS T1
INNER JOIN  (
SELECT      X,
            Y,
            ROW_NUMBER() OVER (ORDER BY X) AS "RowNum"
FROM        Functions) AS T2
ON         (T1.X = T2.Y) AND (T2.X = T1.Y) AND (T1.RowNum != T2.RowNum) AND (T1.X <= T1.Y)
ORDER BY    T1.X;
# Important: The function "Distinct" is applied to every column in SELECT Clause. 

# Solution 02
SELECT      X,
            Y
FROM        (
SELECT      X, Y FROM Functions WHERE X=Y GROUP BY X, Y HAVING COUNT(*) > 1
UNION
SELECT      F1.X, F1.Y FROM Functions AS F1, Functions AS F2
WHERE       F1.X < F1.Y AND F1.X = F2.Y AND F1.Y = F2.X) AS T1
ORDER BY    X, Y;
# Important: UNION removes duplicates.
