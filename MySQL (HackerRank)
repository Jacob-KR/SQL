# MySQL (HackerRank)



# [SQL] [Advanced Select] Type of Triangle
SELECT  CASE
        WHEN A = B AND B = C AND A = C THEN 'Equilateral'
        WHEN (A > B AND A > C AND A >= B + C)
             OR (B > A AND B > C AND B >= A + C)
             OR (C > A AND C > B AND C >= A + B) THEN 'Not A Triangle'
        WHEN A != B AND B != C AND A != C THEN 'Scalene'
        WHEN A = B OR B = C OR A = C THEN 'Isosceles'
        END
FROM    TRIANGLES;



# [SQL] [Advanced Select] The PADS
SELECT      CONCAT(Name, "(", SUBSTR(Occupation, 1, 1), ")")
FROM        OCCUPATIONS
ORDER BY    Name;

SELECT      CONCAT("There are a total of ", 
            CONVERT(COUNT(Occupation), CHAR), " ", LOWER(Occupation), "s.")
FROM        OCCUPATIONS
GROUP BY    Occupation
ORDER BY    COUNT(Occupation), Occupation;



# [SQL] [Advanced Select] Occupations
SELECT
            MAX(CASE WHEN Occupation = 'Doctor' THEN Name END) AS 'Doctor',
            MAX(CASE WHEN Occupation = 'Professor' THEN Name END) AS 'Professor',
            MAX(CASE WHEN Occupation = 'Singer' THEN Name END) AS 'Singer',
            MAX(CASE WHEN Occupation = 'Actor' THEN Name END) AS 'Actor'
FROM        (
SELECT      *,
            ROW_NUMBER() OVER(PARTITION BY Occupation ORDER BY Name) AS Row_Num
FROM        OCCUPATIONS) AS T1
GROUP BY    Row_Num;



# [SQL] [Advanced Select] Binary Tree Nodes
SELECT      N,
            CASE
            WHEN P IS NULL THEN 'Root'
            WHEN N IN (SELECT P FROM BST) THEN 'Inner'
            ELSE 'Leaf'
            END
FROM        BST
ORDER BY    N;



# [SQL] [Advanced Select] New Companies
SELECT      C.company_code,
            C.founder,
            COUNT(DISTINCT LM.lead_manager_code),
            COUNT(DISTINCT SM.senior_manager_code),
            COUNT(DISTINCT M.manager_code),
            COUNT(DISTINCT E.employee_code)
FROM        Company AS C
INNER JOIN  Lead_Manager AS LM
ON          C.company_code = LM.company_code
INNER JOIN  Senior_Manager AS SM
ON          LM.lead_manager_code = SM.lead_manager_code
INNER JOIN  Manager AS M
ON          SM.senior_manager_code = M.senior_manager_code
INNER JOIN  Employee AS E
ON          M.manager_code = E.manager_code
GROUP BY    C.company_code, C.founder
ORDER BY    C.company_code ASC;



# [SQL] [Aggregation] The Blunder
SELECT  CEIL(AVG(Salary) - AVG(REPLACE(Salary, '0', '')))
FROM    EMPLOYEES;



# [SQL] [Aggregation] Weather Observation Station 20
# Solution 01
SELECT  ROUND(LAT_N, 4)
FROM    (
SELECT  LAT_N,
        PERCENT_RANK() OVER(ORDER BY LAT_N) AS per_rank
FROM    STATION) AS T1
WHERE   per_rank = 0.5

# Solution 02
SELECT  ROUND(LAT_N, 4)
FROM    (
SELECT  LAT_N,
        ROW_NUMBER() OVER(ORDER BY LAT_N) as row_num
FROM    STATION) AS T1
WHERE   row_num = (SELECT ROUND(COUNT(LAT_N)/2) FROM STATION);



# [SQL] [Basic Join] The Report
SELECT      CASE
            WHEN Student_Grade >= 8 THEN Student_Name
            ELSE "NULL"
            END,
            Student_Grade,
            Student_Mark
FROM
(
SELECT      S.Name AS Student_Name,
            G.Grade AS Student_Grade,
            S.Marks AS Student_Mark
FROM        Students AS S
INNER JOIN  Grades AS G
WHERE       S.Marks BETWEEN G.Min_Mark AND G.Max_Mark) AS T1
ORDER BY    Student_Grade DESC, Student_Name ASC, Student_Mark ASC;



# [SQL] [Basic Join] Top Competitors
SELECT      H.hacker_id,
            H.name
FROM        Hackers AS H
INNER JOIN  (
SELECT      S.hacker_id,
            COUNT(C.challenge_id) AS count_full_score
FROM        Submissions AS S
INNER JOIN  Challenges AS C
ON          S.challenge_id = C.challenge_id
INNER JOIN  Difficulty AS D
ON          C.difficulty_level = D.difficulty_level
WHERE       S.score = D.score
GROUP BY    S.hacker_id
HAVING      COUNT(C.challenge_id) > 1) AS T1
ON          H.hacker_id = T1.hacker_id
ORDER BY    T1.count_full_score DESC, H.hacker_id ASC;



# [SQL] [Basic Join] Ollivander's Inventory
# Solution 01
SELECT      W.id,
            WP.age,
            W.coins_needed,
            W.power
FROM        Wands AS W
INNER JOIN  Wands_Property AS WP
ON          W.code = WP.code
WHERE       WP.is_evil = 0
            AND W.coins_needed = (SELECT        MIN(coins_needed)
                                  FROM          Wands AS W2
                                  INNER JOIN    Wands_Property AS WP2
                                  ON            W2.code = WP2.code
                                  WHERE         W2.power = W.power AND WP2.age = WP.age)
ORDER BY    W.power DESC, WP.age DESC;



# [SQL] [Advanced Join] SQL Project Planning
SELECT      Start_Date,
            MIN(End_Date)
FROM        (
SELECT      Start_Date
FROM        Projects
WHERE       Start_Date NOT IN (SELECT End_Date FROM Projects)
) AS T1,
(
SELECT      End_Date
FROM        Projects
WHERE       End_Date NOT IN (SELECT Start_Date FROM Projects)
) AS T2
WHERE       Start_Date < End_Date
GROUP BY    Start_Date
ORDER BY    (MIN(End_Date) - Start_Date), Start_Date;



# [SQL] [Advanced Join] Placements
SELECT      Name
FROM
(
SELECT      S.ID,
            S.Name,
            P1.Salary
FROM        Students AS S
INNER JOIN  Packages AS P1
ON          S.ID = P1.ID) AS T1,
(
SELECT      F.ID,
            P2.Salary
FROM        Friends AS F
INNER JOIN  Packages AS P2
ON          F.Friend_ID = P2.ID) AS T2
WHERE       T1.ID = T2.ID AND T1.Salary < T2.Salary
ORDER BY    T2.Salary;



# [SQL] [Advanced Join] Symmetric Pairs
# Solution 01
SELECT      DISTINCT T1.X,
            T1.Y
FROM        (
SELECT      X,
            Y,
            ROW_NUMBER() OVER (ORDER BY X) AS "RowNum"
FROM        Functions) AS T1
INNER JOIN  (
SELECT      X,
            Y,
            ROW_NUMBER() OVER (ORDER BY X) AS "RowNum"
FROM        Functions) AS T2
ON         (T1.X = T2.Y) AND (T2.X = T1.Y) AND (T1.RowNum != T2.RowNum) AND (T1.X <= T1.Y)
ORDER BY    T1.X;
# Important: The function "Distinct" is applied to every column in SELECT Clause. 

# Solution 02
SELECT      X,
            Y
FROM        (
SELECT      X, Y FROM Functions WHERE X=Y GROUP BY X, Y HAVING COUNT(*) > 1
UNION
SELECT      F1.X, F1.Y FROM Functions AS F1, Functions AS F2
WHERE       F1.X < F1.Y AND F1.X = F2.Y AND F1.Y = F2.X) AS T1
ORDER BY    X, Y;
# Important: UNION removes duplicates.



# [SQL] [Alternative Queries] Draw The Triangle 1
# Solution 01
DELIMITER $$
CREATE PROCEDURE asterisk_printer()
BEGIN
    DECLARE n INT DEFAULT 20;
    WHILE (n > 0) DO
        SELECT  REPEAT('* ', n);
        SET n = n - 1;
    END WHILE;
END $$
DELIMITER ;

CALL asterisk_printer();

# Solution 02
DELIMITER $$
CREATE PROCEDURE asterisk_printer (n INT) 
    BEGIN 
        WHILE n >= 1 DO 
            SELECT repeat('* ', n);
            SET n = n - 1;
            END WHILE;
    END; $$
    
CALL asterisk_printer(20);
# Source: https://yourdigitalaid.com/hackerrank-draw-the-triangle-1-sql-solution/



# [SQL] [Alternative Queries] Draw The Triangle 2
DELIMITER $$
CREATE PROCEDURE asterisk_printer()
    BEGIN
        DECLARE n INT DEFAULT 1;
        WHILE (n <= 20) DO
            SELECT REPEAT('* ', n);
            SET n = n + 1;
        END WHILE;
    END $$
DELIMITER ;

CALL asterisk_printer();



# [SQL] [Alternative Queries] Print Prime Numbers
CREATE TABLE thousand_numbers(NUM INT PRIMARY KEY);

DELIMITER $$
CREATE PROCEDURE myFunction()
BEGIN
    DECLARE i INT DEFAULT 1;
    WHILE (i <= 1000) DO
        INSERT INTO thousand_numbers VALUE (i);
        SET i = i + 1;
    END WHILE;
END $$
DELIMITER ;

CALL myFunction();

DELIMITER $$
CREATE PROCEDURE myLoop()
BEGIN
    DECLARE j INT DEFAULT 2;
    WHILE (j <= 1000) DO
        DELETE FROM thousand_numbers WHERE NUM%j = 0 AND NUM/j > 1;
        SET j = j + 1;
    END WHILE;
    DELETE FROM thousand_numbers WHERE NUM = 1;
END $$
DELIMITER ;

CALL myLoop();
SELECT  GROUP_CONCAT(NUM SEPARATOR '&')
FROM    thousand_numbers;
# Important: GROUP_CONCAT & PROCEDURE



